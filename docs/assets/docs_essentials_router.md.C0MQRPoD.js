import{_ as t,c as l,J as a,w as o,E as n,o as h,m as i,a as s}from"./chunks/framework.B_Y9JRDA.js";const M=JSON.parse('{"title":"Router","description":"","frontmatter":{"title":"Router"},"headers":[],"relativePath":"docs/essentials/router.md","filePath":"docs/essentials/router.md"}'),r={name:"docs/essentials/router.md"},d=i("h1",{id:"router",tabindex:"-1"},[s("Router "),i("a",{class:"header-anchor",href:"#router","aria-label":'Permalink to "Router"'},"​")],-1),c=i("h1",{id:"router-1",tabindex:"-1"},[s("Router "),i("a",{class:"header-anchor",href:"#router-1","aria-label":'Permalink to "Router"'},"​")],-1),k=i("p",null,[s("在 "),i("a",{href:"/milkio/docs/quick-start.html"},"快速开始"),s(' 章节中，你肯定体验到了路由的"魔法"。在 Milkio 中，你几乎不需要亲自编写路由的代码。Milkio 会自动阅读 '),i("code",null,"/src/apps"),s(" 目录下的文件，并为你所有的 API 自动生成路由。")],-1),u=i("p",null,[s("In the "),i("a",{href:"/milkio/docs/quick-start.html"},"Quick Start"),s(' section, you must have experienced the "magic" of routing. In Milkio, you hardly need to write the routing code yourself. Milkio will automatically read the files in the '),i("code",null,"/src/apps"),s(" directory and generate routes for all your APIs.")],-1),p=i("h2",{id:"补充路由逻辑",tabindex:"-1"},[s("补充路由逻辑 "),i("a",{class:"header-anchor",href:"#补充路由逻辑","aria-label":'Permalink to "补充路由逻辑"'},"​")],-1),g=i("h2",{id:"supplement-routing-logic",tabindex:"-1"},[s("Supplement routing logic "),i("a",{class:"header-anchor",href:"#supplement-routing-logic","aria-label":'Permalink to "Supplement routing logic"'},"​")],-1),y=i("p",null,[s("在几乎所有情况下，你都只会需要 Milkio 为你自动生成的路由。但或许会有一些特殊情况，你需要自定义你的路由。此时，你可以编辑 "),i("code",null,"/src/router.ts"),s(" 文件。其内容类似如下这样：")],-1),m=i("p",null,[s("In almost all cases, you will only need the routes automatically generated by Milkio for you. However, there may be some special cases where you need to customize your routes. In such situations, you can edit the "),i("code",null,"/src/router.ts"),s(" file. Its content will be similar to the following:")],-1),f=i("div",{class:"language-ts vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"ts"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," const"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," routerHandler"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," async"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"path"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},":"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," string"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"fullurl"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},":"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," URL"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"  // ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"  return"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")])])])],-1),E=i("div",{class:"language-ts vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"ts"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," const"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," routerHandler"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," async"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ("),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"path"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},":"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," string"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"fullurl"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},":"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," URL"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=>"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"  // ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"  return"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"};")])])])],-1),_=i("p",null,[s("你可以编辑此方法的内容，以补充 Milkio 自动生成的路由之外的期望路由匹配逻辑。你可以通过返回一个已存在的 API 地址，它将被调用。如果你返回 "),i("code",null,"false"),s("，将返回一个 "),i("code",null,"NOT_FOUND"),s(" 的失败信息。")],-1),F=i("p",null,[s("You can edit the content of this method to supplement the expected route matching logic outside of the routes automatically generated by Milkio. You can return an existing API address that will be called. If you return "),i("code",null,"false"),s(", a "),i("code",null,"NOT_FOUND"),s(" failure message will be returned.")],-1),b=i("p",null,[s("同时，此方法接受两个参数："),i("code",null,"path"),s(" 和 "),i("code",null,"fullurl"),s("。"),i("code",null,"path"),s(" 表示请求路径的后缀（删除了域名和 "),i("a",{href:"/milkio/docs/essentials/config.html#config-with-milkio"},"忽略的路径层级"),s("），出于性能考虑，如果 URL 中包含参数，这些参数不会被删除，仍然保留在 "),i("code",null,"path"),s(" 中，例如 "),i("code",null,"foo/bar?hello=world"),s("。"),i("code",null,"fullurl"),s(" 是完整的 URL 对象，"),i("a",{href:"/milkio/docs/essentials/config.html#config-with-milkio"},"忽略的路径层级"),s(" 不会被删除。")],-1),A=i("p",null,[s("Additionally, this method accepts two parameters: "),i("code",null,"path"),s(" and "),i("code",null,"fullurl"),s(". "),i("code",null,"path"),s(" represents the suffix of the request path (with the domain and "),i("a",{href:"/milkio/docs/essentials/config.html#config-with-milkio"},"ignored path levels"),s(" removed). For performance reasons, if the URL contains parameters, these parameters will not be removed and will still be preserved in the "),i("code",null,"path"),s(", for example, "),i("code",null,"foo/bar?hello=world"),s(". "),i("code",null,"fullurl"),s(" is the complete URL object, and the "),i("a",{href:"/milkio/docs/essentials/config.html#config-with-milkio"},"ignored path levels"),s(" will not be removed.")],-1),w=i("div",{class:"info custom-block"},[i("p",{class:"custom-block-title"},"INFO"),i("p",null,"请注意，此方法的优先级永远低于 Milkio 自动生成的路由，这意味着你无法禁止某个 API 的访问。这样设计的目的是为了确保你尽量只在此处编写路由匹配规则。如果你需要对某个 API 进行授权才能访问，请使用中间件功能。")],-1),D=i("div",{class:"info custom-block"},[i("p",{class:"custom-block-title"},"INFO"),i("p",null,"Please note that the priority of this method is always lower than the automatically generated routes by Milkio, which means you cannot prohibit access to a specific API. This design is intended to ensure that you only write routing matching rules here as much as possible. If you need to authorize access to a specific API, please use the middleware function.")],-1);function v(I,C,x,B,P,N){const e=n("I18N");return h(),l("div",null,[a(e,null,{default:o(()=>[d,c,k,u,p,g,y,m,f,E,_,F,b,A,w,D]),_:1})])}const U=t(r,[["render",v]]);export{M as __pageData,U as default};
